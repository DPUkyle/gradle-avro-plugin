plugins {
    id "groovy"
    id "checkstyle"
    id "codenarc"
    id "idea"
    id "maven-publish"
    id "com.gradle.plugin-publish" version "0.9.1"
}

repositories {
    jcenter()
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile "org.apache.avro:avro-compiler:1.7.7"
    testCompile "org.spockframework:spock-core:1.3-groovy-2.5"
    testCompile gradleTestKit()
}

tasks.withType(AbstractCompile) {
    options.encoding = "UTF-8"
}
sourceCompatibility = 1.6

version = "0.8.1"
group = "com.commercehub.gradle.plugin"

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

pluginBundle {
    website = "https://github.com/commercehub-oss/gradle-avro-plugin"
    vcsUrl = "https://github.com/commercehub-oss/gradle-avro-plugin"
    description = "A Gradle plugin to allow easily performing Java code generation for Apache Avro. It supports JSON schema declaration files, JSON protocol declaration files, and Avro IDL files."
    tags = ["serialization", "avro"]
    plugins {
        avro {
            id = "com.commercehub.gradle.plugin.avro"
            displayName = "Avro Plugin"
        }
        avroBase {
            id = "com.commercehub.gradle.plugin.avro-base"
            displayName = "Avro Base Plugin"
        }
    }
    mavenCoordinates {
        groupId = group
        artifactId = rootProject.name
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = rootProject.name
            version = version

            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

idea {
    project {
        vcs = "Git"
        ipr {
            withXml { provider ->
                def node = provider.asNode()
                node.append(new XmlParser().parseText("""
                <component name="ProjectCodeStyleSettingsManager">
                    <option name="PER_PROJECT_SETTINGS">
                        <value>
                            <option name="LINE_SEPARATOR" value="&#10;"/>
                            <option name="RIGHT_MARGIN" value="140"/>
                        </value>
                    </option>
                    <option name="USE_PER_PROJECT_SETTINGS" value="true"/>
                </component>
                """.stripIndent()))
            }
        }
    }
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

// Add the classpath file to the test runtime classpath
dependencies {
    testRuntime files(createClasspathManifest)
}

checkstyle {
    toolVersion = "6.1.1" // Last version of checkstyle to support Java 6
}
// Nasty workaround for https://issues.gradle.org/browse/GRADLE-2888
def checkstyleWarningsFile = "build/reports/checkstyle/main.xml"
checkstyleMain {
  doLast {
    File warningsFile = file(checkstyleWarningsFile)
    if (warningsFile.exists() && warningsFile.text.contains("<error ")) {
        throw new GradleException("There were checkstyle warnings! For more info check ${warningsFile}")
    }
  }
}

codenarc {
    toolVersion = "0.24.1"
    config = project.resources.text.fromFile("config/codenarc/codenarc.groovy")
}

wrapper {
  gradleVersion = '5.6'
}
